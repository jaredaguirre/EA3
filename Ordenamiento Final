typedef struct
{
    char dni[11];
    int cant;
}tIndex;

tNodo * buscarMasRepetido(tNodo *, int);

tNodo * buscarMasRepetido(tNodo *p, int cantNodos)
{
    /*
    CÓMO FUNCIONA?
    --------------
    Esta función busca a partir del puntero que se le pasa, el DNI más repetido
    respetando orden cronológico. Al comenzar, crea un vector del tipo "tIndex", cuya
    definición está más arriba, y permite almacenar tanto el DNI de cada nodo así como
    la cantidad de veces que éste aparece en la lista. Para hacerlo dinámico, el vector
    tiene como tamaño máximo la cantidad de nodos, ya que la cantidad de DNIs nunca puede superar
    ese número. Luego de generar y cargar el Índice dinámico, se recorre el mismo buscando
    el DNI con el valor de repeticiones más alto y que haya aparecido primero cronológicamente.

    Luego retornamos la dirección de cualquier Nodo que tenga un DNI que cumpla esa característica.

    DEFINICIÓN DE PUNTEROS:
    -----------------------
    ACT = Apunta al elemento Actual, que se irá comparando con cada elemento del vector índice
    nobj= Nodo objetivo: Es el puntero que, luego de encontrar el DNI objetivo, recorre la lista buscando cualquier
        nodo que posea ese mismo DNI.

    vec = Es el vector Índice, donde se almacena cada DNI, y cuántas veces aparece en Lista.
    lim = Es el limite de inserción en el vector. También funciona como indicador de la cantidad de DNIs diferentes
    found = Es una Bandera para saber si se encontró el elemento recorriendo el vector Índice.
    mayor = Almacena la cantidad mayor de veces que un DNI aparece en el vector índice.
    posiM = Posición Mayor. Es el entero que muestra la posición del mayor en el vector
    */
    tNodo *act = p,
          *nobj = p;

    tIndex *vec = (tIndex*)calloc(cantNodos, sizeof(tIndex));
    int i, lim = 0,
        found,
        mayor = 0,
        posiM = 0;

    //RECORREMOS LA LISTA a fin de llenar el índice
    while(act)
    {
        found = 0;                  //Colocamos la bandera en 0

        //RECORRIDO DEL INDICE
        for(i = 0; i < lim; i++)
        {
            //Si el DNI registrado en el vector es igual al dni del nodo Actual,
            if(!strcmp(vec[i].dni, ((tFinal*)act->info)->dni))
            {
                vec[i].cant++;      //Aumentamos la cantidad de apariciones
                found = 1;          //Colocamos la Bandera en 1
                break;              //Paramos de recorrer el vector
            }
        }
        //Si no encontramos el DNI en el vector,
        //es porque es la primera vez que se ingresa en el mismo, por lo tanto...
        if(!found)
        {
            strcpy(vec[lim].dni, ((tFinal*)act->info)->dni);    //Copiamos el DNI del nodo actal en "pos" del vector
            vec[lim].cant = 1;                                  //La cantidad empieza en 1
            lim++;                                              //aumentamos el límite de inserción en el vector
        }
        act = act->sig;             //ACT avanza al siguiente
    }
    //RECORREMOS EL VECTOR BUSCANDO EL MAYOR
    for(i = lim-1; i >= 0; i--)
    {
        //Si la cantidad es mayor o igual al mayor,
        if(vec[i].cant >= mayor)
        {
            mayor = vec[i].cant;    //el mayor pasa a ser esa cantidad
            posiM = i;              //guardamos la posición con el mayor.
        }
    }
    //Al salir del recorrido, ya tenemos la posición con el mayor DNI
    //Ahora buscamos un nodo que tenga ese mismo DNI
    while(strcmp(vec[posiM].dni, ((tFinal*)nobj->info)->dni) != 0)
        nobj = nobj->sig;
    free(vec);      //liberamos o "limpiamos" el vector

    return nobj;
}


int getCantidadNodosDesdeIni(tNodo*);

int getCantidadNodosDesdeIni(tNodo * ini)
{
    /*Funcion que cuenta la cantidad de Nodos a partir del puntero INI*/

    int cantNodos = 1;
    tNodo * b = ini;
    while(b->sig)
    {
        b = b->sig;
        cantNodos++;
    }
    free(b);
    return cantNodos;
}

void ordenarLista_MIO(tLista *p, int (*comparar)(const void *, const void *))
{
    /*
    CÓMO FUNCIONA?
    --------------
    La función OrdenarLista funciona invocando un puntero INI al comienzo; a partir del cual
    se comienza a buscar el dni más repetido respetando orden cronológico. Para encontrarlo,
    se aplica la función "buscarMasRepetido()" cuyo funcionamiento se explica más arriba.
    Una vez que se encuentra, se "reposicionan" esos elementos que posean ese mismo DNI,
    detrás de INI para luego ejecutarse el mismo procedimiento a partir de INI.
    Al ordenar todo, llegará un punto donde todos los elementos de la lista estarán
    detrás de INI, y entonces el proceso se da por terminado.

    DEFINICIÓN DE PUNTEROS Y VARIABLES:
    -----------------------------------
    INI = Inicio de Busqueda. A partir de este puntero y hasta el final de la lista,
          se comenzará a buscar al ultimo Nodo con el dni más repetido.
    R   = Puntero Recorrido. Es el puntero que se desprende de INI y comienza a recorrer
          la lista en busca de nodos con el DNI objetivo. Si R llega a tener valor NULL,
          es porque hay que buscar un nuevo DNI para seguir ordenando.

    nodoEncontrado = Es el puntero que apunta al Nodo que se utilizará como "objetivo", el
                     cual contiene el DNI que tenemos como objetivo de búsqueda. En este
                     caso "nodoEncontrado" apunta siempre al último de la lista que cumpla
                     con esa condición, sin embargo el proceso funciona igualmente si apuntara
                     a cualquier otro Nodo con el DNI objetivo.

    cantNodos = En esta variable se guarda la cantidad de nodos de la lista A PARTIR DE INI. Disminuye su
                valor cada vez que se acomodan nodos detrás de INI. Sirve como parámetro para la función
                "buscarMasRepetido()" que se explica más arriba.
    */
    tNodo *ini = *p,
          *r = NULL,
          *nodoObjetivo;

    int cantNodos;

    //Si la lista está vacía, no hay ordenamiento
    if(!ini)
        return;

    //Posicionamos INI al comienzo
    while(ini->ant)
        ini = ini->ant;

    //Calculamos la cantidad de nodos a partir de INI
    cantNodos = getCantidadNodosDesdeIni(ini);

    //Mientras INI tenga un nodo siguiente
    while(ini->sig)
    {
        //Si R es NULL, comienza la
        //BUSQUEDA DE DNI OBJETIVO
        if(!r)
        {
            nodoObjetivo = buscarMasRepetido(ini, cantNodos);    //Establecemos el nodo con el DNI objetivo
            r = ini;                                             //R se invoca apuntando al mismo nodo que INI
        }
        //Si R apunta a un Nodo con el DNI Objetivo
        if(comparar(r->info, nodoObjetivo->info) == 0)
        {
            //e INI y R apuntan al mismo Nodo,
            if(ini == r)
            {
                r = r->sig;     //Ambos Avanzan al siguiente, y
                ini = ini->sig; //de esta forma nos ahorramos el proceso de cableado...
                cantNodos--;    //Disminuye la cantidad de nodos
            }
            /*si no, movemos el nodo R hacia antes del nodo INI y después del último ingresado.
              A este movimiento le llamamos "cableado"*/
            else
            {
                //PROCESO DE CABLEADO:
                tNodo *aux = r->ant;                /*La variable aux nos sirve para no perder
                                                      la posicion donde R debe regresar*/

                if((r->ant->sig = r->sig) != NULL)  //Si el anterior a R, no cablea a NULL,
                    r->sig->ant = r->ant;           //entonces el posterior a R, cablea al anterior a R

                if(ini->ant)                        //Si INI tiene un elemento antes,
                    ini->ant->sig = r;              //el anterior a INI cablea a R

                r->ant = ini->ant;                  //R se posiciona despues del anterior de INI
                ini->ant = r;                       //Y antes de INI
                r->sig = ini;
                r = aux->sig;

                cantNodos--;                        //disminuye la cantidad de Nodos
            }
        }
        //si no, R avanza al siguiente
        else r = r->sig;
    }
}
